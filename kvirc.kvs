#TODO : Ne pas spammer si plusieurs entrées lors de l'appel de ce script
#TODO : comment gérer plusieurs épisodes à télécharger simultanément
#TODO : Gérer si un fichier s'est mal téléchargé --> DONE mais difficile de tester
#TODO : Gérer si un fichier n'a pas été trouvé dans les bots (flexget --series-forget) --> DONE mais à tester

# Les commentaires commencent par
# Les variables commencent par % pour l'affectation ou l'appel 

#Ajout de la classe serie qui consigne les propriétés d'une série
class(Serie,object)
{
		constructor()
        {
			# Nom de la série
            $this->%serie_name=$0
			# Numéro de l'épisode			
			$this->%serie_episode=$1 
			# Qualité de l'épisode
			if ($str.contains($2,"h264")) {
				$this->%serie_quality="x264"
			} else {
				$this->%serie_quality=$2
			}
			# Url de l'épisode			
			$this->%serie_url=$3      
        }
}

#Ajout de la classe Flexget qui consigne les propriétés de Flexget
class(FlexGet,object)
{
		constructor()
        {	
			# Path de l'exécutable
            $this->%exe_path=$0
			# Fichier de config de flexget			
			$this->%config_file=$1 
        }
}


# Le mot clé "event" permet de gérer un événment IRC : réception de message dans un salon, réception de message privé (QueryNotice)
# Dans le cas ci-dessous, on demande de gérer les événements "messages privés" avec pour nom une procédure "getPackage"
# Pour regarder ce qui est automatiquement passé en paramètres à un "OnQueryNotice" se référer à la doc

event(OnQueryNotice,getPackage)
{
	# Les variables sont passées en global en utilisant le mot clé "global"
	# Il y a certainement plus propre à faire mais pas encore regardé
	
	# Sur IRC, très fréquemment les messages sont écrits avec des couleurs
	# La commande "stripcolors" permet de retirer tous les codes couleurs du message reçu
	%cmd = $str.stripcolors($3)
	
	# Dans notre cas, il faut gérer seulement les mesages privés provenant des bots nommés "ls" ou "cl" et ne prendre en compte que les messages 
	# contenant "/msg" qui indique que le bot nous  communique des commandes à exécuter pour récupérer les paquets
    if(($0 == "ls" || $0 == "cl") &&  $str.contains( %cmd,"/msg")){
		# L'affectation ci-dessous permet de ne récupérer que la chaîne de caractères de la commande donnée par le bot
		%cmd = $str.mid(%cmd, $str.find(%cmd,"msg"), $( $str.find(%cmd," | Used") - $str.find(%cmd,"msg")))
		# On construtit un tableau de commande  "CmdTable" avec toutes les commandes fournies par le bot
		%CmdTable <+ %cmd
		#echo %CmdTable
		# La ligne suivante permet de lancer une unique fois un timer.
		# Le principe du timer est d'exécuter une commande après n millisecondes.
		# Dans notre cas, on parse la table des commandes reçues après 10 secondes pour être sur que le bot nous a communiqué l'intégralité des commandes
		if(%TimerParseCmdTable==0) {%TimerParseCmdTable=1;timer(TimerParseCmdTable,10000){ parseCmdTable; }}
	} else if ( $str.contains( %cmd,"Invalid Pack") ) {
		 # Parfois la liste fournie par le bot n'est pas tout à fait à jour
		 # ce qui fait qu'on peut recevoir des messages "Invalid PAck" fourni par le bot à qui on demande le téléchargement du pack
		 # Si on reçoit ce message, on incrémente le compteur de commande et on évalue la commande suivante
		 %CptCmd++
		 eval  %CmdTable[%CptCmd]
	} else if ( $str.contains( %cmd,"No packs found for") ) {
		exec -e -t -x ("%Flexget->%exe_path -c %Flexget->%config_file --forget \"%Serie->%serie_url\"") {echo $1;};
		timer(flexget,1000) {exec -e -t -x ("%Flexget->%exe_path -c %Flexget->%config_file --series-forget '%Serie->%serie_name Sserie->%serie_episode'") {echo $1;};killtimer flexget;}
	}
	# On récupére l'identifiant de la fenêtre courante pour pouvoir lancer l'évaluation de nos commandes.
	%Winid = $window
    
}

# On gère l'événement fichier mal transféré "OnDCCFileTransferFailed" en relançant la commande suivante dans la table CmdTable
# TODO : Faire en sorte d'avertir par mail, android, .... si on a parcouru toutes les commandes sans avoir un fichier bon!
event(OnDCCFileTransferFailed,transferFailed)
{
	# Incrément du compteur de commande
	# %CptCmd++
	# On revient sur la fenêtre dont on avait sauvé l'ID 
	rebind  %Winid
	# On évalue (exécute) une des commandes passés par le bot.
	#eval  %CmdTable[%CptCmd]
	parseCmdTable
	
}

# Un alias est l'équivalent d'une fonction à qui on donne un nom "parseCmdTable"
# Si il y a des paramètres, ils s'appelleront $1,$2,$3,...
alias(parseCmdTable)
{
	# On évalue (exécute) une des commandes passés par le bot.
	if (%CptCmd <= $length(%CmdTable)) {
		eval  %CmdTable[%CptCmd]
	} else {
	# On a parcouru toutes les cmd sans qu'on ait un package valide -> on fait un forget dans FlexGet
		exec -e -t -x ("%Flexget->%exe_path -c %Flexget->%config_file --forget \"%Serie->%serie_url\"") {echo $1;};
		timer(flexget,1000) {exec -e -t -x ("%Flexget->%exe_path -c %Flexget->%config_file --series-forget '%Serie->%serie_name Sserie->%serie_episode'") {echo $1;};killtimer flexget;}
	}
	
	# On kill le timer qui sinon s'exécute toutes les n millisecondes (dans notre cas 10 secondes)
	if ($istimer(TimerParseCmdTable)) {
		killtimer TimerParseCmdTable
	}
	%CptCmd++
	
} 

# Définition des varibales globales qu'on unset au début pour être sur qu'elles sont vides 
#global %CmdTable,%TimerParseCmdTable,%cptCmd,%Winid,%serie,%flexget;
unset  %CmdTable;
#unset ,%TimerParseCmdTable,%cptCmd,%Winid;

# Initialisation de certaines valeurs de variables
%TimerParseCmdTable=0
%CptCmd=0
#%floodCpt=0

%Serie=$new(Serie,0,"myserie",$1,$2,$3,$4)
%Flexget=$new(FlexGet,0,"myflexget","I:\\Python26\\Scripts\\flexget.exe",$5)



# On rejoint les salons #mg-chat et #movie-gods
join #mg-chat 
join #moviegods

# On lance un message sur le channel #mg-chat avec les paramètres passés par le script kvirc
#timer(antiflood%floodCpt,10000){ global  %floodCpt,%param1,%param2,%param3; msg #mg-chat !s %param1 %param2 %param3; killtimer antiflood%floodCpt;%floodCpt++;}
msg #mg-chat !s "%Serie->%serie_name" "%Serie->%serie_episode" "%Serie->%serie_quality"